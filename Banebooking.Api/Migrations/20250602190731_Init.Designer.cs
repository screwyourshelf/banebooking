// <auto-generated />
using System;
using Banebooking.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Banebooking.Api.Migrations
{
    [DbContext(typeof(BanebookingDbContext))]
    [Migration("20250602190731_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Arrangement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Aktiv")
                        .HasColumnType("boolean");

                    b.Property<string>("Beskrivelse")
                        .HasColumnType("text");

                    b.Property<int>("Kategori")
                        .HasColumnType("integer");

                    b.Property<Guid>("KlubbId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OpprettetAvId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OpprettetTid")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("SluttDato")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDato")
                        .HasColumnType("date");

                    b.Property<string>("Tittel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("KlubbId");

                    b.HasIndex("OpprettetAvId");

                    b.ToTable("Arrangementer");
                });

            modelBuilder.Entity("Banebooking.Api.Models.Bane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Aktiv")
                        .HasColumnType("boolean");

                    b.Property<string>("Beskrivelse")
                        .HasColumnType("text");

                    b.Property<Guid>("KlubbId")
                        .HasColumnType("uuid");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KlubbId", "Navn")
                        .IsUnique()
                        .HasDatabaseName("IX_Bane_Klubb_Navn");

                    b.ToTable("Baner");
                });

            modelBuilder.Entity("Banebooking.Api.Models.BestemmelseForBooking", b =>
                {
                    b.Property<Guid>("KlubbId")
                        .HasColumnType("uuid");

                    b.Property<int>("AntallDagerFremITidTillatt")
                        .HasColumnType("integer");

                    b.Property<int>("MaksAntallBookingerPerBrukerTotalt")
                        .HasColumnType("integer");

                    b.Property<int>("MaksBookingerPerDagPerBruker")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("SlotLengde")
                        .HasColumnType("interval");

                    b.Property<TimeOnly>("Stengetid")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("Åpningstid")
                        .HasColumnType("time without time zone");

                    b.HasKey("KlubbId");

                    b.ToTable("BookingRegler");
                });

            modelBuilder.Entity("Banebooking.Api.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Aktiv")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ArrangementId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BrukerId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Dato")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("SluttTid")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartTid")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementId");

                    b.HasIndex("BrukerId");

                    b.HasIndex("BaneId", "Dato", "StartTid")
                        .IsUnique()
                        .HasDatabaseName("IX_Booking_UnikSlotPerBane")
                        .HasFilter("\"Aktiv\" = TRUE");

                    b.ToTable("Bookinger");
                });

            modelBuilder.Entity("Banebooking.Api.Models.Bruker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Epost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Merknad")
                        .HasColumnType("text");

                    b.Property<string>("Navn")
                        .HasColumnType("text");

                    b.Property<DateTime>("OpprettetTid")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sub")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brukere");
                });

            modelBuilder.Entity("Banebooking.Api.Models.BrukerRolle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrukerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KlubbId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rolle")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrukerId");

                    b.HasIndex("KlubbId", "BrukerId")
                        .IsUnique()
                        .HasDatabaseName("IX_Rolle_UnikPerBrukerOgKlubb");

                    b.ToTable("Roller");
                });

            modelBuilder.Entity("Klubb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Banereglement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KontaktEpost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Klubber");
                });

            modelBuilder.Entity("Arrangement", b =>
                {
                    b.HasOne("Klubb", "Klubb")
                        .WithMany()
                        .HasForeignKey("KlubbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Banebooking.Api.Models.Bruker", "OpprettetAv")
                        .WithMany()
                        .HasForeignKey("OpprettetAvId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Klubb");

                    b.Navigation("OpprettetAv");
                });

            modelBuilder.Entity("Banebooking.Api.Models.Bane", b =>
                {
                    b.HasOne("Klubb", "Klubb")
                        .WithMany("Baner")
                        .HasForeignKey("KlubbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Klubb");
                });

            modelBuilder.Entity("Banebooking.Api.Models.BestemmelseForBooking", b =>
                {
                    b.HasOne("Klubb", "Klubb")
                        .WithOne("BookingRegel")
                        .HasForeignKey("Banebooking.Api.Models.BestemmelseForBooking", "KlubbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Klubb");
                });

            modelBuilder.Entity("Banebooking.Api.Models.Booking", b =>
                {
                    b.HasOne("Arrangement", "Arrangement")
                        .WithMany("Bookinger")
                        .HasForeignKey("ArrangementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Banebooking.Api.Models.Bane", "Bane")
                        .WithMany("Bookinger")
                        .HasForeignKey("BaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Banebooking.Api.Models.Bruker", "Bruker")
                        .WithMany("Bookinger")
                        .HasForeignKey("BrukerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Arrangement");

                    b.Navigation("Bane");

                    b.Navigation("Bruker");
                });

            modelBuilder.Entity("Banebooking.Api.Models.BrukerRolle", b =>
                {
                    b.HasOne("Banebooking.Api.Models.Bruker", "Bruker")
                        .WithMany("Roller")
                        .HasForeignKey("BrukerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Klubb", "Klubb")
                        .WithMany("Roller")
                        .HasForeignKey("KlubbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bruker");

                    b.Navigation("Klubb");
                });

            modelBuilder.Entity("Arrangement", b =>
                {
                    b.Navigation("Bookinger");
                });

            modelBuilder.Entity("Banebooking.Api.Models.Bane", b =>
                {
                    b.Navigation("Bookinger");
                });

            modelBuilder.Entity("Banebooking.Api.Models.Bruker", b =>
                {
                    b.Navigation("Bookinger");

                    b.Navigation("Roller");
                });

            modelBuilder.Entity("Klubb", b =>
                {
                    b.Navigation("Baner");

                    b.Navigation("BookingRegel")
                        .IsRequired();

                    b.Navigation("Roller");
                });
#pragma warning restore 612, 618
        }
    }
}
